name: cd-qrcode

on:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
      - qrcode/**

jobs:
  check-release-label:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      has-release-label: ${{ steps.check-label.outputs.has-release-label }}
    steps:
      - name: Check for release label
        id: check-label
        run: |
          LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          if [[ "$LABELS" == *'release'* ]]; then
            echo 'has-release-label=true' >> $GITHUB_OUTPUT
          else
            echo 'has-release-label=false' >> $GITHUB_OUTPUT
          fi
  deploy:
    runs-on: ubuntu-latest
    needs: check-release-label
    if: needs.check-release-label.outputs.has-release-label == 'true'
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      QRCODE_ECR_REPOSITORY_NAME: ${{ secrets.QRCODE_ECR_REPOSITORY_NAME }}
      QRCODE_FUNCTION_NAME: ${{ secrets.QRCODE_FUNCTION_NAME }}
    defaults:
      run:
        working-directory: ./qrcode
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Extract pnpm version from package.json
          PNPM_VERSION=$(grep -o '"pnpm@[^"]*"' "$GITHUB_WORKSPACE/qrcode/package.json" | grep -o '[0-9]*\.[0-9]*\.[0-9]*')

          echo "Building docker image with pnpm version: $PNPM_VERSION"
          echo "Image tag: $IMAGE_TAG"
          docker build -f "$GITHUB_WORKSPACE/docker/qrcode/Dockerfile" \
            --build-arg PNPM_VERSION="$PNPM_VERSION" \
            --platform linux/amd64 \
            --no-cache \
            --provenance=false \
            -t tend-attend-qrcode:"$IMAGE_TAG" "$GITHUB_WORKSPACE" --progress=plain

          echo 'Tagging docker image...'
          docker tag tend-attend-qrcode:"$IMAGE_TAG" "$REGISTRY/$QRCODE_ECR_REPOSITORY_NAME:$IMAGE_TAG"

          echo 'Pushing docker image to Amazon ECR...'
          docker push "$REGISTRY/$QRCODE_ECR_REPOSITORY_NAME:$IMAGE_TAG"

          echo 'Successfully pushed docker image to Amazon ECR'
      - name: Update Lambda function image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Updating Lambda function $QRCODE_FUNCTION_NAME with new image..."
          aws lambda update-function-code \
            --function-name "$QRCODE_FUNCTION_NAME" \
            --image-uri "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/tend-attend-qrcode:$IMAGE_TAG"

          echo 'Waiting for Lambda function update to complete...'
          aws lambda wait function-updated --function-name "$QRCODE_FUNCTION_NAME"

          echo "Successfully updated Lambda function $QRCODE_FUNCTION_NAME"
